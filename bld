#!/usr/bin/perl
use strict;
use warnings;
use File::Path qw(make_path);
use File::Basename;
use LWP::Simple;
use JSON;

# Define the repositories to pull with manual or latest tags
my %repos = (
    "linux"  => {
        url  => "https://github.com/torvalds/linux.git",
        tag  => "v5.15.0",  # Manually defined version (you can replace this with 'latest' to use the latest tag)
    },
    "busybox" => {
        url  => "https://github.com/mirror/busybox.git",
        tag  => "1.35.0",   # Manually defined version (you can replace this with 'latest' to use the latest tag)
    },
);

# Define where to clone the repositories
my $base_dir = "/tmp/minimal-linux";

# Create the base directory if it doesn't exist
unless (-d $base_dir) {
    make_path($base_dir) or die "Failed to create directory $base_dir: $!\n";
}

# Change into the base directory
chdir($base_dir) or die "Failed to change directory to $base_dir: $!\n";

# Function to fetch the latest stable tag from GitHub
sub get_latest_tag {
    my $repo_url = shift;
    my $repo_name = basename($repo_url, '.git');
    my $api_url = "https://api.github.com/repos/$repo_name/releases/latest";

    # Fetch the JSON data from the GitHub API
    my $json = get($api_url);
    unless ($json) {
        die "Failed to fetch data from GitHub API for $repo_name\n";
    }

    # Parse the JSON response
    my $data = decode_json($json);

    # Extract the latest stable release tag
    if ($data && exists $data->{tag_name}) {
        return $data->{tag_name};
    } else {
        die "Could not find tag in GitHub API response for $repo_name\n";
    }
}

# Function to clone a Git repository and checkout a specific tag
sub clone_repo {
    my ($repo_name, $repo_url, $tag) = @_;
    my $repo_dir = "$base_dir/$repo_name";

    if (-d $repo_dir) {
        print "$repo_name already exists, checking out tag $tag...\n";
        chdir($repo_dir) or die "Failed to change into repo directory: $!\n";
        system("git fetch --all") == 0 or die "Git fetch failed for $repo_name: $!\n";
        system("git checkout $tag") == 0 or die "Git checkout failed for $repo_name tag $tag: $!\n";
    } else {
        print "Cloning $repo_name from $repo_url...\n";
        system("git clone $repo_url") == 0 or die "Git clone failed for $repo_name: $!\n";
        chdir($repo_dir) or die "Failed to change into repo directory: $!\n";
        system("git checkout $tag") == 0 or die "Git checkout failed for $repo_name tag $tag: $!\n";
    }

    # Change back to the base directory after cloning or pulling
    chdir($base_dir) or die "Failed to change back to base directory: $!\n";
}

# Clone all repositories and checkout the appropriate tag (either manual or latest)
foreach my $repo_name (keys %repos) {
    my $repo_url = $repos{$repo_name}->{url};
    my $repo_tag = $repos{$repo_name}->{tag};

    # If the tag is 'latest', fetch the latest stable tag dynamically
    if ($repo_tag eq 'latest') {
        print "Fetching the latest stable version for $repo_name...\n";
        $repo_tag = get_latest_tag($repo_url);  # Fetch the latest stable tag from GitHub
    }

    print "Using tag $repo_tag for $repo_name\n";
    clone_repo($repo_name, $repo_url, $repo_tag);
}

# After cloning, set up a minimal Linux build environment
# You can add additional steps for configuring and building the kernel, BusyBox, etc.
print "Repositories have been cloned and checked out to their specified tags (or latest stable versions).\n";

# Example of how you would build the Linux kernel (just an example):
# This would need to be customized to your environment!
print "You can now proceed to configure and build the kernel and BusyBox manually:\n";
print "  cd $base_dir/linux\n";
print "  make menuconfig  # Configure the kernel\n";
print "  make             # Build the kernel\n";
print "  cd ../busybox\n";
print "  make menuconfig  # Configure BusyBox\n";
print "  make             # Build BusyBox\n";

print "Done!\n";

