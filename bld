#!/usr/bin/perl
use strict;
use warnings;
use File::Path qw(make_path);
use File::Basename;
use LWP::Simple;
use JSON;

# Define the repositories to pull with manual or latest tags
my %repos = (
    "linux"  => {
        url  => "https://github.com/torvalds/linux.git",
        tag  => "v5.15.0",  # Manually defined version (you can replace this with 'latest' to use the latest tag)
    },
    "busybox" => {
        url  => "https://github.com/mirror/busybox.git",
        tag  => "1.35.0",   # Manually defined version (you can replace this with 'latest' to use the latest tag)
    },
    "git" => {
        url  => "https://github.com/git/git.git",
        tag  => "v2.37.0",  # You can change the tag to the latest version or specify a custom tag
    },
    "gcc" => {
        url  => "https://github.com/gcc-mirror/gcc.git",
        tag  => "releases/gcc-11.2.0", # You can change to the latest stable version or use a custom tag
    },
    "make" => {
        url  => "https://github.com/mirror/make.git",
        tag  => "v4.3", # Manually specified version (replace with the latest if desired)
    },
);

# Define where to clone the repositories
my $base_dir = "/tmp/minimal-linux";
my $iso_dir = "$base_dir/iso";  # Directory to create ISO
my $boot_dir = "$iso_dir/boot"; # Boot directory for the ISO
my $grub_dir = "$boot_dir/grub"; # GRUB directory for the menu

# Create the necessary directories if they don't exist
make_path($iso_dir, $boot_dir, $grub_dir) or die "Failed to create ISO directories: $!\n";

# Change into the base directory
chdir($base_dir) or die "Failed to change directory to $base_dir: $!\n";

# Function to fetch the latest stable tag from GitHub
sub get_latest_tag {
    my $repo_url = shift;
    my $repo_name = basename($repo_url, '.git');
    my $api_url = "https://api.github.com/repos/$repo_name/releases/latest";

    # Fetch the JSON data from the GitHub API
    my $json = get($api_url);
    unless ($json) {
        die "Failed to fetch data from GitHub API for $repo_name\n";
    }

    # Parse the JSON response
    my $data = decode_json($json);

    # Extract the latest stable release tag
    if ($data && exists $data->{tag_name}) {
        return $data->{tag_name};
    } else {
        die "Could not find tag in GitHub API response for $repo_name\n";
    }
}

# Function to clone a Git repository and checkout a specific tag
sub clone_repo {
    my ($repo_name, $repo_url, $tag) = @_;
    my $repo_dir = "$base_dir/$repo_name";

    if (-d $repo_dir) {
        print "$repo_name already exists, checking out tag $tag...\n";
        chdir($repo_dir) or die "Failed to change into repo directory: $!\n";
        system("git fetch --all") == 0 or die "Git fetch failed for $repo_name: $!\n";
        system("git checkout $tag") == 0 or die "Git checkout failed for $repo_name tag $tag: $!\n";
    } else {
        print "Cloning $repo_name from $repo_url...\n";
        system("git clone $repo_url") == 0 or die "Git clone failed for $repo_name: $!\n";
        chdir($repo_dir) or die "Failed to change into repo directory: $!\n";
        system("git checkout $tag") == 0 or die "Git checkout failed for $repo_name tag $tag: $!\n";
    }

    # Change back to the base directory after cloning or pulling
    chdir($base_dir) or die "Failed to change back to base directory: $!\n";
}

# Function to install dependencies (generic version)
sub install_dependencies {
    print "Installing dependencies...\n";
    system("sudo apt update") == 0 or die "Failed to update packages: $!\n";
    system("sudo apt install -y build-essential autoconf automake libtool curl grub-pc xorriso") == 0
        or die "Failed to install build tools and dependencies: $!\n";
}

# Generic build function that takes the source directory, configure options, build, and install commands
sub build_from_source {
    my ($source_dir, $config_cmd, $build_cmd, $install_cmd) = @_;

    print "Building $source_dir from source...\n";
    chdir($source_dir) or die "Failed to change to $source_dir directory: $!\n";

    # Run the configuration command if provided
    if ($config_cmd) {
        print "Running configuration: $config_cmd\n";
        system($config_cmd) == 0 or die "Configuration failed for $source_dir: $!\n";
    }

    # Run the build command
    print "Building with: $build_cmd\n";
    system($build_cmd) == 0 or die "Build failed for $source_dir: $!\n";

    # Run the installation command
    print "Installing with: $install_cmd\n";
    system($install_cmd) == 0 or die "Installation failed for $source_dir: $!\n";

    # Change back to the base directory
    chdir($base_dir) or die "Failed to change back to base directory: $!\n";
}

# Function to set up GRUB bootloader
sub setup_grub {
    print "Setting up GRUB bootloader...\n";

    my $grub_cfg = "$grub_dir/grub.cfg";

    open(my $fh, '>', $grub_cfg) or die "Cannot open GRUB config file: $!\n";

    print $fh <<'END';
set default=0
set timeout=5

menuentry "Minimal Linux" {
    set root=(hd0)
    linux /boot/vmlinuz root=/dev/sda1 ro
    initrd /boot/initrd.img
}
END

    close($fh) or die "Failed to write GRUB config: $!\n";
}

# Function to copy kernel and busybox to boot directory
sub copy_kernel_and_busybox {
    print "Copying kernel and BusyBox to boot directory...\n";

    # Copy the kernel
    system("cp $base_dir/linux/arch/x86/boot/bzImage $boot_dir/vmlinuz") == 0
        or die "Failed to copy kernel to boot directory: $!\n";

    # Copy the BusyBox binary (assuming it was built)
    system("cp $base_dir/busybox/_install/bin/busybox $boot_dir/bin") == 0
        or die "Failed to copy BusyBox to boot directory: $!\n";
}

# Function to create the bootable ISO
sub create_iso {
    print "Creating ISO...\n";

    # Use xorriso to create the ISO
    system("xorriso -as mkisofs -o $base_dir/minimal-linux.iso -b boot/grub/iso9660.img -c boot.cat -boot-load-size 4 -boot-info-table $iso_dir") == 0
        or die "Failed to create ISO: $!\n";
}

# Clone all repositories and checkout the appropriate tag (either manual or latest)
foreach my $repo_name (keys %repos) {
    my $repo_url = $repos{$repo_name}->{url};
    my $repo_tag = $repos{$repo_name}->{tag};

    # If the tag is 'latest', fetch the latest stable tag dynamically
    if ($repo_tag eq 'latest') {
        print "Fetching the latest stable version for $repo_name...\n";
        $repo_tag = get_latest_tag($repo_url);  # Fetch the latest stable tag from GitHub
    }

    print "Using tag $repo_tag for $repo_name\n";
    clone_repo($repo_name, $repo_url, $repo_tag);
}

# Install dependencies (e.g., build tools, compilers)
install_dependencies();

# Build Git from source
build_from_source(
    "$base_dir/git",
    "",  # No configuration needed for Git
    "make prefix=/usr/local all",  # Build Git
    "sudo make prefix=/usr/local install",  # Install Git
);

# Build GCC from source
build_from_source(
    "$base_dir/gcc",
    "./configure --prefix=/usr/local --enable-languages=c,c++",  # Configure GCC
    "make -j$(nproc)",  # Build GCC using multiple cores
    "sudo make install",  # Install GCC
);

# Build Make from source
build_from_source(
    "$base_dir/make",
    "./configure",  # Configure Make
    "make -j$(nproc)",  # Build Make
    "sudo make install",  # Install Make
);

# Copy kernel and BusyBox to boot directory
copy_kernel_and_busybox();

# Set up GRUB bootloader
setup_grub();

# Create the bootable ISO
create_iso();

# After cloning and building, set up a minimal Linux build environment
print "Bootable ISO has been created successfully!\n";
print "You can now use it to boot your system.\n";
